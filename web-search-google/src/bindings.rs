// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod golem {
    pub mod web_search_google {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Optional image-related result data
            #[derive(Clone)]
            pub struct ImageResult {
                pub url: _rt::String,
                pub description: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ImageResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImageResult")
                        .field("url", &self.url)
                        .field("description", &self.description)
                        .finish()
                }
            }
            /// Core structure for a single search result
            #[derive(Clone)]
            pub struct SearchResult {
                pub title: _rt::String,
                pub url: _rt::String,
                pub snippet: _rt::String,
                pub display_url: Option<_rt::String>,
                pub source: Option<_rt::String>,
                pub score: Option<f64>,
                pub html_snippet: Option<_rt::String>,
                pub date_published: Option<_rt::String>,
                pub images: Option<_rt::Vec<ImageResult>>,
                pub content_chunks: Option<_rt::Vec<_rt::String>>,
            }
            impl ::core::fmt::Debug for SearchResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SearchResult")
                        .field("title", &self.title)
                        .field("url", &self.url)
                        .field("snippet", &self.snippet)
                        .field("display-url", &self.display_url)
                        .field("source", &self.source)
                        .field("score", &self.score)
                        .field("html-snippet", &self.html_snippet)
                        .field("date-published", &self.date_published)
                        .field("images", &self.images)
                        .field("content-chunks", &self.content_chunks)
                        .finish()
                }
            }
            /// Safe search settings
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum SafeSearchLevel {
                Off,
                Medium,
                High,
            }
            impl ::core::fmt::Debug for SafeSearchLevel {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        SafeSearchLevel::Off => {
                            f.debug_tuple("SafeSearchLevel::Off").finish()
                        }
                        SafeSearchLevel::Medium => {
                            f.debug_tuple("SafeSearchLevel::Medium").finish()
                        }
                        SafeSearchLevel::High => {
                            f.debug_tuple("SafeSearchLevel::High").finish()
                        }
                    }
                }
            }
            impl SafeSearchLevel {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> SafeSearchLevel {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => SafeSearchLevel::Off,
                        1 => SafeSearchLevel::Medium,
                        2 => SafeSearchLevel::High,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Rate limiting metadata
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct RateLimitInfo {
                pub limit: u32,
                pub remaining: u32,
                pub reset_timestamp: u64,
            }
            impl ::core::fmt::Debug for RateLimitInfo {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RateLimitInfo")
                        .field("limit", &self.limit)
                        .field("remaining", &self.remaining)
                        .field("reset-timestamp", &self.reset_timestamp)
                        .finish()
                }
            }
            /// Optional metadata for a search session
            #[derive(Clone)]
            pub struct SearchMetadata {
                pub query: _rt::String,
                pub total_results: Option<u64>,
                pub search_time_ms: Option<f64>,
                pub safe_search: Option<SafeSearchLevel>,
                pub language: Option<_rt::String>,
                pub region: Option<_rt::String>,
                pub next_page_token: Option<_rt::String>,
                pub rate_limits: Option<RateLimitInfo>,
            }
            impl ::core::fmt::Debug for SearchMetadata {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SearchMetadata")
                        .field("query", &self.query)
                        .field("total-results", &self.total_results)
                        .field("search-time-ms", &self.search_time_ms)
                        .field("safe-search", &self.safe_search)
                        .field("language", &self.language)
                        .field("region", &self.region)
                        .field("next-page-token", &self.next_page_token)
                        .field("rate-limits", &self.rate_limits)
                        .finish()
                }
            }
            /// Supported time range filtering
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum TimeRange {
                Day,
                Week,
                Month,
                Year,
            }
            impl ::core::fmt::Debug for TimeRange {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        TimeRange::Day => f.debug_tuple("TimeRange::Day").finish(),
                        TimeRange::Week => f.debug_tuple("TimeRange::Week").finish(),
                        TimeRange::Month => f.debug_tuple("TimeRange::Month").finish(),
                        TimeRange::Year => f.debug_tuple("TimeRange::Year").finish(),
                    }
                }
            }
            impl TimeRange {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> TimeRange {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => TimeRange::Day,
                        1 => TimeRange::Week,
                        2 => TimeRange::Month,
                        3 => TimeRange::Year,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Query parameters accepted by the unified search API
            #[derive(Clone)]
            pub struct SearchParams {
                pub query: _rt::String,
                pub safe_search: Option<SafeSearchLevel>,
                pub language: Option<_rt::String>,
                pub region: Option<_rt::String>,
                pub max_results: Option<u32>,
                pub time_range: Option<TimeRange>,
                pub include_domains: Option<_rt::Vec<_rt::String>>,
                pub exclude_domains: Option<_rt::Vec<_rt::String>>,
                pub include_images: Option<bool>,
                pub include_html: Option<bool>,
                pub advanced_answer: Option<bool>,
            }
            impl ::core::fmt::Debug for SearchParams {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SearchParams")
                        .field("query", &self.query)
                        .field("safe-search", &self.safe_search)
                        .field("language", &self.language)
                        .field("region", &self.region)
                        .field("max-results", &self.max_results)
                        .field("time-range", &self.time_range)
                        .field("include-domains", &self.include_domains)
                        .field("exclude-domains", &self.exclude_domains)
                        .field("include-images", &self.include_images)
                        .field("include-html", &self.include_html)
                        .field("advanced-answer", &self.advanced_answer)
                        .finish()
                }
            }
            /// Structured search error
            #[derive(Clone)]
            pub enum SearchError {
                InvalidQuery,
                RateLimited(u32),
                UnsupportedFeature(_rt::String),
                BackendError(_rt::String),
            }
            impl ::core::fmt::Debug for SearchError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        SearchError::InvalidQuery => {
                            f.debug_tuple("SearchError::InvalidQuery").finish()
                        }
                        SearchError::RateLimited(e) => {
                            f.debug_tuple("SearchError::RateLimited").field(e).finish()
                        }
                        SearchError::UnsupportedFeature(e) => {
                            f.debug_tuple("SearchError::UnsupportedFeature")
                                .field(e)
                                .finish()
                        }
                        SearchError::BackendError(e) => {
                            f.debug_tuple("SearchError::BackendError").field(e).finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for SearchError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for SearchError {}
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod golem {
        pub mod web_search_google {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod web_search {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type SearchParams = super::super::super::super::golem::web_search_google::types::SearchParams;
                pub type SearchResult = super::super::super::super::golem::web_search_google::types::SearchResult;
                pub type SearchMetadata = super::super::super::super::golem::web_search_google::types::SearchMetadata;
                pub type SearchError = super::super::super::super::golem::web_search_google::types::SearchError;
                /// Represents an ongoing search session for pagination or streaming
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct SearchSession {
                    handle: _rt::Resource<SearchSession>,
                }
                type _SearchSessionRep<T> = Option<T>;
                impl SearchSession {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `SearchSession`.
                    pub fn new<T: GuestSearchSession>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _SearchSessionRep<T> = Some(val);
                        let ptr: *mut _SearchSessionRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestSearchSession>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestSearchSession>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestSearchSession>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _SearchSessionRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestSearchSession>(
                        &self,
                    ) -> *mut _SearchSessionRep<T> {
                        SearchSession::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`SearchSession`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct SearchSessionBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a SearchSession>,
                }
                impl<'a> SearchSessionBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestSearchSession>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _SearchSessionRep<T> {
                        SearchSession::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for SearchSession {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]golem:web-search-google/web-search@1.0.0"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]search-session"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_start_search_cabi<T: Guest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = i32::from(
                        *arg0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l5 = i32::from(
                        *arg0.add(3 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l9 = i32::from(
                        *arg0.add(6 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l13 = i32::from(
                        *arg0.add(9 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l15 = i32::from(
                        *arg0
                            .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l17 = i32::from(
                        *arg0
                            .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l24 = i32::from(
                        *arg0
                            .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l31 = i32::from(
                        *arg0
                            .add(8 + 16 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l33 = i32::from(
                        *arg0
                            .add(10 + 16 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l35 = i32::from(
                        *arg0
                            .add(12 + 16 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let result37 = T::start_search(super::super::super::super::golem::web_search_google::types::SearchParams {
                        query: _rt::string_lift(bytes2),
                        safe_search: match l3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l4 = i32::from(
                                        *arg0
                                            .add(1 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    super::super::super::super::golem::web_search_google::types::SafeSearchLevel::_lift(
                                        l4 as u8,
                                    )
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        language: match l5 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l6 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len8 = l7;
                                    let bytes8 = _rt::Vec::from_raw_parts(
                                        l6.cast(),
                                        len8,
                                        len8,
                                    );
                                    _rt::string_lift(bytes8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        region: match l9 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l10 = *arg0
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len12 = l11;
                                    let bytes12 = _rt::Vec::from_raw_parts(
                                        l10.cast(),
                                        len12,
                                        len12,
                                    );
                                    _rt::string_lift(bytes12)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        max_results: match l13 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l14 = *arg0
                                        .add(4 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>();
                                    l14 as u32
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        time_range: match l15 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l16 = i32::from(
                                        *arg0
                                            .add(9 + 9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    super::super::super::super::golem::web_search_google::types::TimeRange::_lift(
                                        l16 as u8,
                                    )
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        include_domains: match l17 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l18 = *arg0
                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l19 = *arg0
                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base23 = l18;
                                    let len23 = l19;
                                    let mut result23 = _rt::Vec::with_capacity(len23);
                                    for i in 0..len23 {
                                        let base = base23
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        let e23 = {
                                            let l20 = *base.add(0).cast::<*mut u8>();
                                            let l21 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len22 = l21;
                                            let bytes22 = _rt::Vec::from_raw_parts(
                                                l20.cast(),
                                                len22,
                                                len22,
                                            );
                                            _rt::string_lift(bytes22)
                                        };
                                        result23.push(e23);
                                    }
                                    _rt::cabi_dealloc(
                                        base23,
                                        len23 * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    result23
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        exclude_domains: match l24 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l25 = *arg0
                                        .add(8 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l26 = *arg0
                                        .add(8 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base30 = l25;
                                    let len30 = l26;
                                    let mut result30 = _rt::Vec::with_capacity(len30);
                                    for i in 0..len30 {
                                        let base = base30
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        let e30 = {
                                            let l27 = *base.add(0).cast::<*mut u8>();
                                            let l28 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len29 = l28;
                                            let bytes29 = _rt::Vec::from_raw_parts(
                                                l27.cast(),
                                                len29,
                                                len29,
                                            );
                                            _rt::string_lift(bytes29)
                                        };
                                        result30.push(e30);
                                    }
                                    _rt::cabi_dealloc(
                                        base30,
                                        len30 * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    result30
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        include_images: match l31 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l32 = i32::from(
                                        *arg0
                                            .add(9 + 16 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    _rt::bool_lift(l32 as u8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        include_html: match l33 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l34 = i32::from(
                                        *arg0
                                            .add(11 + 16 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    _rt::bool_lift(l34 as u8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        advanced_answer: match l35 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l36 = i32::from(
                                        *arg0
                                            .add(13 + 16 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    _rt::bool_lift(l36 as u8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    });
                    _rt::cabi_dealloc(
                        arg0,
                        16 + 16 * ::core::mem::size_of::<*const u8>(),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let ptr38 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result37 {
                        Ok(e) => {
                            *ptr38.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr38
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr38.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::web_search_google::types::SearchError as V41;
                            match e {
                                V41::InvalidQuery => {
                                    *ptr38
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V41::RateLimited(e) => {
                                    *ptr38
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr38
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                                V41::UnsupportedFeature(e) => {
                                    *ptr38
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec39 = (e.into_bytes()).into_boxed_slice();
                                    let ptr39 = vec39.as_ptr().cast::<u8>();
                                    let len39 = vec39.len();
                                    ::core::mem::forget(vec39);
                                    *ptr38
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len39;
                                    *ptr38
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr39.cast_mut();
                                }
                                V41::BackendError(e) => {
                                    *ptr38
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec40 = (e.into_bytes()).into_boxed_slice();
                                    let ptr40 = vec40.as_ptr().cast::<u8>();
                                    let len40 = vec40.len();
                                    ::core::mem::forget(vec40);
                                    *ptr38
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len40;
                                    *ptr38
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr40.cast_mut();
                                }
                            }
                        }
                    };
                    ptr38
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_start_search<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                1 => {}
                                2 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                _ => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_search_session_cabi<
                    T: GuestSearchSession,
                >(arg0: *mut u8) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = i32::from(
                        *arg0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l5 = i32::from(
                        *arg0.add(3 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l9 = i32::from(
                        *arg0.add(6 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l13 = i32::from(
                        *arg0.add(9 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l15 = i32::from(
                        *arg0
                            .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l17 = i32::from(
                        *arg0
                            .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l24 = i32::from(
                        *arg0
                            .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l31 = i32::from(
                        *arg0
                            .add(8 + 16 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l33 = i32::from(
                        *arg0
                            .add(10 + 16 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l35 = i32::from(
                        *arg0
                            .add(12 + 16 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let result37 = SearchSession::new(
                        T::new(super::super::super::super::golem::web_search_google::types::SearchParams {
                            query: _rt::string_lift(bytes2),
                            safe_search: match l3 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l4 = i32::from(
                                            *arg0
                                                .add(1 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::super::golem::web_search_google::types::SafeSearchLevel::_lift(
                                            l4 as u8,
                                        )
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            language: match l5 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l6 = *arg0
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l7 = *arg0
                                            .add(5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len8 = l7;
                                        let bytes8 = _rt::Vec::from_raw_parts(
                                            l6.cast(),
                                            len8,
                                            len8,
                                        );
                                        _rt::string_lift(bytes8)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            region: match l9 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l10 = *arg0
                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l11 = *arg0
                                            .add(8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len12 = l11;
                                        let bytes12 = _rt::Vec::from_raw_parts(
                                            l10.cast(),
                                            len12,
                                            len12,
                                        );
                                        _rt::string_lift(bytes12)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            max_results: match l13 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l14 = *arg0
                                            .add(4 + 9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i32>();
                                        l14 as u32
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            time_range: match l15 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l16 = i32::from(
                                            *arg0
                                                .add(9 + 9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        super::super::super::super::golem::web_search_google::types::TimeRange::_lift(
                                            l16 as u8,
                                        )
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            include_domains: match l17 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l18 = *arg0
                                            .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l19 = *arg0
                                            .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base23 = l18;
                                        let len23 = l19;
                                        let mut result23 = _rt::Vec::with_capacity(len23);
                                        for i in 0..len23 {
                                            let base = base23
                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                            let e23 = {
                                                let l20 = *base.add(0).cast::<*mut u8>();
                                                let l21 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len22 = l21;
                                                let bytes22 = _rt::Vec::from_raw_parts(
                                                    l20.cast(),
                                                    len22,
                                                    len22,
                                                );
                                                _rt::string_lift(bytes22)
                                            };
                                            result23.push(e23);
                                        }
                                        _rt::cabi_dealloc(
                                            base23,
                                            len23 * (2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result23
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            exclude_domains: match l24 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l25 = *arg0
                                            .add(8 + 14 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l26 = *arg0
                                            .add(8 + 15 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base30 = l25;
                                        let len30 = l26;
                                        let mut result30 = _rt::Vec::with_capacity(len30);
                                        for i in 0..len30 {
                                            let base = base30
                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                            let e30 = {
                                                let l27 = *base.add(0).cast::<*mut u8>();
                                                let l28 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len29 = l28;
                                                let bytes29 = _rt::Vec::from_raw_parts(
                                                    l27.cast(),
                                                    len29,
                                                    len29,
                                                );
                                                _rt::string_lift(bytes29)
                                            };
                                            result30.push(e30);
                                        }
                                        _rt::cabi_dealloc(
                                            base30,
                                            len30 * (2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result30
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            include_images: match l31 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l32 = i32::from(
                                            *arg0
                                                .add(9 + 16 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        _rt::bool_lift(l32 as u8)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            include_html: match l33 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l34 = i32::from(
                                            *arg0
                                                .add(11 + 16 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        _rt::bool_lift(l34 as u8)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            advanced_answer: match l35 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l36 = i32::from(
                                            *arg0
                                                .add(13 + 16 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        _rt::bool_lift(l36 as u8)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        }),
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        16 + 16 * ::core::mem::size_of::<*const u8>(),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    (result37).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_search_session_next_page_cabi<
                    T: GuestSearchSession,
                >(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::next_page(
                        unsafe { SearchSessionBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let vec16 = e;
                            let len16 = vec16.len();
                            let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec16.len()
                                    * (16 + 24 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                            let result16 = if layout16.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout16);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec16.into_iter().enumerate() {
                                let base = result16
                                    .add(i * (16 + 24 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::golem::web_search_google::types::SearchResult {
                                        title: title2,
                                        url: url2,
                                        snippet: snippet2,
                                        display_url: display_url2,
                                        source: source2,
                                        score: score2,
                                        html_snippet: html_snippet2,
                                        date_published: date_published2,
                                        images: images2,
                                        content_chunks: content_chunks2,
                                    } = e;
                                    let vec3 = (title2.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                                    let vec4 = (url2.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                    let vec5 = (snippet2.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                    match display_url2 {
                                        Some(e) => {
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec6 = (e.into_bytes()).into_boxed_slice();
                                            let ptr6 = vec6.as_ptr().cast::<u8>();
                                            let len6 = vec6.len();
                                            ::core::mem::forget(vec6);
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len6;
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr6.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match source2 {
                                        Some(e) => {
                                            *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec7 = (e.into_bytes()).into_boxed_slice();
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            ::core::mem::forget(vec7);
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len7;
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr7.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match score2 {
                                        Some(e) => {
                                            *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<f64>() = _rt::as_f64(e);
                                        }
                                        None => {
                                            *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match html_snippet2 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec8 = (e.into_bytes()).into_boxed_slice();
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();
                                            ::core::mem::forget(vec8);
                                            *base
                                                .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len8;
                                            *base
                                                .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr8.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match date_published2 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec9 = (e.into_bytes()).into_boxed_slice();
                                            let ptr9 = vec9.as_ptr().cast::<u8>();
                                            let len9 = vec9.len();
                                            ::core::mem::forget(vec9);
                                            *base
                                                .add(16 + 17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len9;
                                            *base
                                                .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr9.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match images2 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 18 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec13 = e;
                                            let len13 = vec13.len();
                                            let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec13.len() * (5 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result13 = if layout13.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout13);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec13.into_iter().enumerate() {
                                                let base = result13
                                                    .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let super::super::super::super::golem::web_search_google::types::ImageResult {
                                                        url: url10,
                                                        description: description10,
                                                    } = e;
                                                    let vec11 = (url10.into_bytes()).into_boxed_slice();
                                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                                    let len11 = vec11.len();
                                                    ::core::mem::forget(vec11);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len11;
                                                    *base.add(0).cast::<*mut u8>() = ptr11.cast_mut();
                                                    match description10 {
                                                        Some(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec12 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                                            let len12 = vec12.len();
                                                            ::core::mem::forget(vec12);
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len12;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr12.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                            *base
                                                .add(16 + 20 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len13;
                                            *base
                                                .add(16 + 19 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result13;
                                        }
                                        None => {
                                            *base
                                                .add(16 + 18 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match content_chunks2 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 21 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec15 = e;
                                            let len15 = vec15.len();
                                            let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec15.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result15 = if layout15.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout15);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec15.into_iter().enumerate() {
                                                let base = result15
                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                                    let len14 = vec14.len();
                                                    ::core::mem::forget(vec14);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len14;
                                                    *base.add(0).cast::<*mut u8>() = ptr14.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(16 + 23 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len15;
                                            *base
                                                .add(16 + 22 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result15;
                                        }
                                        None => {
                                            *base
                                                .add(16 + 21 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr1
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len16;
                            *ptr1
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result16;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::web_search_google::types::SearchError as V19;
                            match e {
                                V19::InvalidQuery => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                                V19::RateLimited(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                                V19::UnsupportedFeature(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec17 = (e.into_bytes()).into_boxed_slice();
                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                    let len17 = vec17.len();
                                    ::core::mem::forget(vec17);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len17;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr17.cast_mut();
                                }
                                V19::BackendError(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec18 = (e.into_bytes()).into_boxed_slice();
                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                    let len18 = vec18.len();
                                    ::core::mem::forget(vec18);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len18;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr18.cast_mut();
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_search_session_next_page<
                    T: GuestSearchSession,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base36 = l1;
                            let len36 = l2;
                            for i in 0..len36 {
                                let base = base36
                                    .add(i * (16 + 24 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l6 = *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                    let l7 = *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l8 = *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                    let l9 = i32::from(
                                        *base
                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l9 {
                                        0 => {}
                                        _ => {
                                            let l10 = *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l11 = *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l10, l11, 1);
                                        }
                                    }
                                    let l12 = i32::from(
                                        *base
                                            .add(9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l12 {
                                        0 => {}
                                        _ => {
                                            let l13 = *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l14 = *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l13, l14, 1);
                                        }
                                    }
                                    let l15 = i32::from(
                                        *base
                                            .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l15 {
                                        0 => {}
                                        _ => {
                                            let l16 = *base
                                                .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l17 = *base
                                                .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l16, l17, 1);
                                        }
                                    }
                                    let l18 = i32::from(
                                        *base
                                            .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l18 {
                                        0 => {}
                                        _ => {
                                            let l19 = *base
                                                .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l20 = *base
                                                .add(16 + 17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l19, l20, 1);
                                        }
                                    }
                                    let l21 = i32::from(
                                        *base
                                            .add(16 + 18 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l21 {
                                        0 => {}
                                        _ => {
                                            let l22 = *base
                                                .add(16 + 19 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l23 = *base
                                                .add(16 + 20 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base29 = l22;
                                            let len29 = l23;
                                            for i in 0..len29 {
                                                let base = base29
                                                    .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l24 = *base.add(0).cast::<*mut u8>();
                                                    let l25 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l24, l25, 1);
                                                    let l26 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l26 {
                                                        0 => {}
                                                        _ => {
                                                            let l27 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l28 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l27, l28, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base29,
                                                len29 * (5 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                    let l30 = i32::from(
                                        *base
                                            .add(16 + 21 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l30 {
                                        0 => {}
                                        _ => {
                                            let l31 = *base
                                                .add(16 + 22 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l32 = *base
                                                .add(16 + 23 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base35 = l31;
                                            let len35 = l32;
                                            for i in 0..len35 {
                                                let base = base35
                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l33 = *base.add(0).cast::<*mut u8>();
                                                    let l34 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l33, l34, 1);
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base35,
                                                len35 * (2 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base36,
                                len36 * (16 + 24 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                        }
                        _ => {
                            let l37 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l37 {
                                0 => {}
                                1 => {}
                                2 => {
                                    let l38 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l39 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l38, l39, 1);
                                }
                                _ => {
                                    let l40 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l41 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l40, l41, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_search_session_get_metadata_cabi<
                    T: GuestSearchSession,
                >(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_metadata(
                        unsafe { SearchSessionBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::golem::web_search_google::types::SearchMetadata {
                                query: query2,
                                total_results: total_results2,
                                search_time_ms: search_time_ms2,
                                safe_search: safe_search2,
                                language: language2,
                                region: region2,
                                next_page_token: next_page_token2,
                                rate_limits: rate_limits2,
                            } = e;
                            let vec3 = (query2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr1
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                            match total_results2 {
                                Some(e) => {
                                    *ptr1
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr1
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr1
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match search_time_ms2 {
                                Some(e) => {
                                    *ptr1
                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr1
                                        .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f64>() = _rt::as_f64(e);
                                }
                                None => {
                                    *ptr1
                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match safe_search2 {
                                Some(e) => {
                                    *ptr1
                                        .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr1
                                        .add(41 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (e.clone() as i32) as u8;
                                }
                                None => {
                                    *ptr1
                                        .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match language2 {
                                Some(e) => {
                                    *ptr1
                                        .add(40 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr1
                                        .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr1
                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(40 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match region2 {
                                Some(e) => {
                                    *ptr1
                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr1
                                        .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr1
                                        .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match next_page_token2 {
                                Some(e) => {
                                    *ptr1
                                        .add(40 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr1
                                        .add(40 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr1
                                        .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(40 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match rate_limits2 {
                                Some(e) => {
                                    *ptr1
                                        .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::golem::web_search_google::types::RateLimitInfo {
                                        limit: limit7,
                                        remaining: remaining7,
                                        reset_timestamp: reset_timestamp7,
                                    } = e;
                                    *ptr1
                                        .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(limit7);
                                    *ptr1
                                        .add(52 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(remaining7);
                                    *ptr1
                                        .add(56 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(reset_timestamp7);
                                }
                                None => {
                                    *ptr1
                                        .add(40 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_search_session_get_metadata<
                    T: GuestSearchSession,
                >(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = i32::from(
                                *arg0
                                    .add(40 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l3 {
                                0 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                            let l6 = i32::from(
                                *arg0
                                    .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l6 {
                                0 => {}
                                _ => {
                                    let l7 = *arg0
                                        .add(40 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l8 = *arg0
                                        .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                }
                            }
                            let l9 = i32::from(
                                *arg0
                                    .add(40 + 9 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l9 {
                                0 => {}
                                _ => {
                                    let l10 = *arg0
                                        .add(40 + 10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(40 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_search_once_cabi<T: Guest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = i32::from(
                        *arg0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l5 = i32::from(
                        *arg0.add(3 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l9 = i32::from(
                        *arg0.add(6 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l13 = i32::from(
                        *arg0.add(9 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l15 = i32::from(
                        *arg0
                            .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l17 = i32::from(
                        *arg0
                            .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l24 = i32::from(
                        *arg0
                            .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l31 = i32::from(
                        *arg0
                            .add(8 + 16 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l33 = i32::from(
                        *arg0
                            .add(10 + 16 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l35 = i32::from(
                        *arg0
                            .add(12 + 16 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let result37 = T::search_once(super::super::super::super::golem::web_search_google::types::SearchParams {
                        query: _rt::string_lift(bytes2),
                        safe_search: match l3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l4 = i32::from(
                                        *arg0
                                            .add(1 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    super::super::super::super::golem::web_search_google::types::SafeSearchLevel::_lift(
                                        l4 as u8,
                                    )
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        language: match l5 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l6 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len8 = l7;
                                    let bytes8 = _rt::Vec::from_raw_parts(
                                        l6.cast(),
                                        len8,
                                        len8,
                                    );
                                    _rt::string_lift(bytes8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        region: match l9 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l10 = *arg0
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len12 = l11;
                                    let bytes12 = _rt::Vec::from_raw_parts(
                                        l10.cast(),
                                        len12,
                                        len12,
                                    );
                                    _rt::string_lift(bytes12)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        max_results: match l13 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l14 = *arg0
                                        .add(4 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>();
                                    l14 as u32
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        time_range: match l15 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l16 = i32::from(
                                        *arg0
                                            .add(9 + 9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    super::super::super::super::golem::web_search_google::types::TimeRange::_lift(
                                        l16 as u8,
                                    )
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        include_domains: match l17 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l18 = *arg0
                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l19 = *arg0
                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base23 = l18;
                                    let len23 = l19;
                                    let mut result23 = _rt::Vec::with_capacity(len23);
                                    for i in 0..len23 {
                                        let base = base23
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        let e23 = {
                                            let l20 = *base.add(0).cast::<*mut u8>();
                                            let l21 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len22 = l21;
                                            let bytes22 = _rt::Vec::from_raw_parts(
                                                l20.cast(),
                                                len22,
                                                len22,
                                            );
                                            _rt::string_lift(bytes22)
                                        };
                                        result23.push(e23);
                                    }
                                    _rt::cabi_dealloc(
                                        base23,
                                        len23 * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    result23
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        exclude_domains: match l24 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l25 = *arg0
                                        .add(8 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l26 = *arg0
                                        .add(8 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base30 = l25;
                                    let len30 = l26;
                                    let mut result30 = _rt::Vec::with_capacity(len30);
                                    for i in 0..len30 {
                                        let base = base30
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        let e30 = {
                                            let l27 = *base.add(0).cast::<*mut u8>();
                                            let l28 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len29 = l28;
                                            let bytes29 = _rt::Vec::from_raw_parts(
                                                l27.cast(),
                                                len29,
                                                len29,
                                            );
                                            _rt::string_lift(bytes29)
                                        };
                                        result30.push(e30);
                                    }
                                    _rt::cabi_dealloc(
                                        base30,
                                        len30 * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    result30
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        include_images: match l31 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l32 = i32::from(
                                        *arg0
                                            .add(9 + 16 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    _rt::bool_lift(l32 as u8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        include_html: match l33 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l34 = i32::from(
                                        *arg0
                                            .add(11 + 16 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    _rt::bool_lift(l34 as u8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        advanced_answer: match l35 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l36 = i32::from(
                                        *arg0
                                            .add(13 + 16 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    _rt::bool_lift(l36 as u8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    });
                    _rt::cabi_dealloc(
                        arg0,
                        16 + 16 * ::core::mem::size_of::<*const u8>(),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let ptr38 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result37 {
                        Ok(e) => {
                            *ptr38.add(0).cast::<u8>() = (0i32) as u8;
                            let (t39_0, t39_1) = e;
                            let vec54 = t39_0;
                            let len54 = vec54.len();
                            let layout54 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec54.len()
                                    * (16 + 24 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                            let result54 = if layout54.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout54).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout54);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec54.into_iter().enumerate() {
                                let base = result54
                                    .add(i * (16 + 24 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::golem::web_search_google::types::SearchResult {
                                        title: title40,
                                        url: url40,
                                        snippet: snippet40,
                                        display_url: display_url40,
                                        source: source40,
                                        score: score40,
                                        html_snippet: html_snippet40,
                                        date_published: date_published40,
                                        images: images40,
                                        content_chunks: content_chunks40,
                                    } = e;
                                    let vec41 = (title40.into_bytes()).into_boxed_slice();
                                    let ptr41 = vec41.as_ptr().cast::<u8>();
                                    let len41 = vec41.len();
                                    ::core::mem::forget(vec41);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len41;
                                    *base.add(0).cast::<*mut u8>() = ptr41.cast_mut();
                                    let vec42 = (url40.into_bytes()).into_boxed_slice();
                                    let ptr42 = vec42.as_ptr().cast::<u8>();
                                    let len42 = vec42.len();
                                    ::core::mem::forget(vec42);
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len42;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr42.cast_mut();
                                    let vec43 = (snippet40.into_bytes()).into_boxed_slice();
                                    let ptr43 = vec43.as_ptr().cast::<u8>();
                                    let len43 = vec43.len();
                                    ::core::mem::forget(vec43);
                                    *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len43;
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr43.cast_mut();
                                    match display_url40 {
                                        Some(e) => {
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec44 = (e.into_bytes()).into_boxed_slice();
                                            let ptr44 = vec44.as_ptr().cast::<u8>();
                                            let len44 = vec44.len();
                                            ::core::mem::forget(vec44);
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len44;
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr44.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match source40 {
                                        Some(e) => {
                                            *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec45 = (e.into_bytes()).into_boxed_slice();
                                            let ptr45 = vec45.as_ptr().cast::<u8>();
                                            let len45 = vec45.len();
                                            ::core::mem::forget(vec45);
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len45;
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr45.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match score40 {
                                        Some(e) => {
                                            *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<f64>() = _rt::as_f64(e);
                                        }
                                        None => {
                                            *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match html_snippet40 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec46 = (e.into_bytes()).into_boxed_slice();
                                            let ptr46 = vec46.as_ptr().cast::<u8>();
                                            let len46 = vec46.len();
                                            ::core::mem::forget(vec46);
                                            *base
                                                .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len46;
                                            *base
                                                .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr46.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match date_published40 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec47 = (e.into_bytes()).into_boxed_slice();
                                            let ptr47 = vec47.as_ptr().cast::<u8>();
                                            let len47 = vec47.len();
                                            ::core::mem::forget(vec47);
                                            *base
                                                .add(16 + 17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len47;
                                            *base
                                                .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr47.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match images40 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 18 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec51 = e;
                                            let len51 = vec51.len();
                                            let layout51 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec51.len() * (5 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result51 = if layout51.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout51).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout51);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec51.into_iter().enumerate() {
                                                let base = result51
                                                    .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let super::super::super::super::golem::web_search_google::types::ImageResult {
                                                        url: url48,
                                                        description: description48,
                                                    } = e;
                                                    let vec49 = (url48.into_bytes()).into_boxed_slice();
                                                    let ptr49 = vec49.as_ptr().cast::<u8>();
                                                    let len49 = vec49.len();
                                                    ::core::mem::forget(vec49);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len49;
                                                    *base.add(0).cast::<*mut u8>() = ptr49.cast_mut();
                                                    match description48 {
                                                        Some(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec50 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr50 = vec50.as_ptr().cast::<u8>();
                                                            let len50 = vec50.len();
                                                            ::core::mem::forget(vec50);
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len50;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr50.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                            *base
                                                .add(16 + 20 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len51;
                                            *base
                                                .add(16 + 19 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result51;
                                        }
                                        None => {
                                            *base
                                                .add(16 + 18 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match content_chunks40 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 21 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec53 = e;
                                            let len53 = vec53.len();
                                            let layout53 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec53.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result53 = if layout53.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout53).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout53);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec53.into_iter().enumerate() {
                                                let base = result53
                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let vec52 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr52 = vec52.as_ptr().cast::<u8>();
                                                    let len52 = vec52.len();
                                                    ::core::mem::forget(vec52);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len52;
                                                    *base.add(0).cast::<*mut u8>() = ptr52.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(16 + 23 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len53;
                                            *base
                                                .add(16 + 22 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result53;
                                        }
                                        None => {
                                            *base
                                                .add(16 + 21 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr38
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len54;
                            *ptr38.add(8).cast::<*mut u8>() = result54;
                            match t39_1 {
                                Some(e) => {
                                    *ptr38
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::golem::web_search_google::types::SearchMetadata {
                                        query: query55,
                                        total_results: total_results55,
                                        search_time_ms: search_time_ms55,
                                        safe_search: safe_search55,
                                        language: language55,
                                        region: region55,
                                        next_page_token: next_page_token55,
                                        rate_limits: rate_limits55,
                                    } = e;
                                    let vec56 = (query55.into_bytes()).into_boxed_slice();
                                    let ptr56 = vec56.as_ptr().cast::<u8>();
                                    let len56 = vec56.len();
                                    ::core::mem::forget(vec56);
                                    *ptr38
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len56;
                                    *ptr38
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr56.cast_mut();
                                    match total_results55 {
                                        Some(e) => {
                                            *ptr38
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *ptr38
                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>() = _rt::as_i64(e);
                                        }
                                        None => {
                                            *ptr38
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match search_time_ms55 {
                                        Some(e) => {
                                            *ptr38
                                                .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *ptr38
                                                .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<f64>() = _rt::as_f64(e);
                                        }
                                        None => {
                                            *ptr38
                                                .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match safe_search55 {
                                        Some(e) => {
                                            *ptr38
                                                .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *ptr38
                                                .add(49 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (e.clone() as i32) as u8;
                                        }
                                        None => {
                                            *ptr38
                                                .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match language55 {
                                        Some(e) => {
                                            *ptr38
                                                .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec57 = (e.into_bytes()).into_boxed_slice();
                                            let ptr57 = vec57.as_ptr().cast::<u8>();
                                            let len57 = vec57.len();
                                            ::core::mem::forget(vec57);
                                            *ptr38
                                                .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len57;
                                            *ptr38
                                                .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr57.cast_mut();
                                        }
                                        None => {
                                            *ptr38
                                                .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match region55 {
                                        Some(e) => {
                                            *ptr38
                                                .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec58 = (e.into_bytes()).into_boxed_slice();
                                            let ptr58 = vec58.as_ptr().cast::<u8>();
                                            let len58 = vec58.len();
                                            ::core::mem::forget(vec58);
                                            *ptr38
                                                .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len58;
                                            *ptr38
                                                .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr58.cast_mut();
                                        }
                                        None => {
                                            *ptr38
                                                .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match next_page_token55 {
                                        Some(e) => {
                                            *ptr38
                                                .add(48 + 11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec59 = (e.into_bytes()).into_boxed_slice();
                                            let ptr59 = vec59.as_ptr().cast::<u8>();
                                            let len59 = vec59.len();
                                            ::core::mem::forget(vec59);
                                            *ptr38
                                                .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len59;
                                            *ptr38
                                                .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr59.cast_mut();
                                        }
                                        None => {
                                            *ptr38
                                                .add(48 + 11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match rate_limits55 {
                                        Some(e) => {
                                            *ptr38
                                                .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::golem::web_search_google::types::RateLimitInfo {
                                                limit: limit60,
                                                remaining: remaining60,
                                                reset_timestamp: reset_timestamp60,
                                            } = e;
                                            *ptr38
                                                .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(limit60);
                                            *ptr38
                                                .add(60 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(remaining60);
                                            *ptr38
                                                .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>() = _rt::as_i64(reset_timestamp60);
                                        }
                                        None => {
                                            *ptr38
                                                .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr38
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr38.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::web_search_google::types::SearchError as V63;
                            match e {
                                V63::InvalidQuery => {
                                    *ptr38.add(8).cast::<u8>() = (0i32) as u8;
                                }
                                V63::RateLimited(e) => {
                                    *ptr38.add(8).cast::<u8>() = (1i32) as u8;
                                    *ptr38
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                                V63::UnsupportedFeature(e) => {
                                    *ptr38.add(8).cast::<u8>() = (2i32) as u8;
                                    let vec61 = (e.into_bytes()).into_boxed_slice();
                                    let ptr61 = vec61.as_ptr().cast::<u8>();
                                    let len61 = vec61.len();
                                    ::core::mem::forget(vec61);
                                    *ptr38
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len61;
                                    *ptr38
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr61.cast_mut();
                                }
                                V63::BackendError(e) => {
                                    *ptr38.add(8).cast::<u8>() = (3i32) as u8;
                                    let vec62 = (e.into_bytes()).into_boxed_slice();
                                    let ptr62 = vec62.as_ptr().cast::<u8>();
                                    let len62 = vec62.len();
                                    ::core::mem::forget(vec62);
                                    *ptr38
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len62;
                                    *ptr38
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr62.cast_mut();
                                }
                            }
                        }
                    };
                    ptr38
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_search_once<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base36 = l1;
                            let len36 = l2;
                            for i in 0..len36 {
                                let base = base36
                                    .add(i * (16 + 24 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l6 = *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                    let l7 = *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l8 = *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                    let l9 = i32::from(
                                        *base
                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l9 {
                                        0 => {}
                                        _ => {
                                            let l10 = *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l11 = *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l10, l11, 1);
                                        }
                                    }
                                    let l12 = i32::from(
                                        *base
                                            .add(9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l12 {
                                        0 => {}
                                        _ => {
                                            let l13 = *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l14 = *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l13, l14, 1);
                                        }
                                    }
                                    let l15 = i32::from(
                                        *base
                                            .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l15 {
                                        0 => {}
                                        _ => {
                                            let l16 = *base
                                                .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l17 = *base
                                                .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l16, l17, 1);
                                        }
                                    }
                                    let l18 = i32::from(
                                        *base
                                            .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l18 {
                                        0 => {}
                                        _ => {
                                            let l19 = *base
                                                .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l20 = *base
                                                .add(16 + 17 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l19, l20, 1);
                                        }
                                    }
                                    let l21 = i32::from(
                                        *base
                                            .add(16 + 18 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l21 {
                                        0 => {}
                                        _ => {
                                            let l22 = *base
                                                .add(16 + 19 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l23 = *base
                                                .add(16 + 20 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base29 = l22;
                                            let len29 = l23;
                                            for i in 0..len29 {
                                                let base = base29
                                                    .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l24 = *base.add(0).cast::<*mut u8>();
                                                    let l25 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l24, l25, 1);
                                                    let l26 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l26 {
                                                        0 => {}
                                                        _ => {
                                                            let l27 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l28 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l27, l28, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base29,
                                                len29 * (5 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                    let l30 = i32::from(
                                        *base
                                            .add(16 + 21 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l30 {
                                        0 => {}
                                        _ => {
                                            let l31 = *base
                                                .add(16 + 22 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l32 = *base
                                                .add(16 + 23 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base35 = l31;
                                            let len35 = l32;
                                            for i in 0..len35 {
                                                let base = base35
                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l33 = *base.add(0).cast::<*mut u8>();
                                                    let l34 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l33, l34, 1);
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base35,
                                                len35 * (2 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base36,
                                len36 * (16 + 24 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                            let l37 = i32::from(
                                *arg0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l37 {
                                0 => {}
                                _ => {
                                    let l38 = *arg0
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l39 = *arg0
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l38, l39, 1);
                                    let l40 = i32::from(
                                        *arg0
                                            .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l40 {
                                        0 => {}
                                        _ => {
                                            let l41 = *arg0
                                                .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l42 = *arg0
                                                .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l41, l42, 1);
                                        }
                                    }
                                    let l43 = i32::from(
                                        *arg0
                                            .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l43 {
                                        0 => {}
                                        _ => {
                                            let l44 = *arg0
                                                .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l45 = *arg0
                                                .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l44, l45, 1);
                                        }
                                    }
                                    let l46 = i32::from(
                                        *arg0
                                            .add(48 + 11 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l46 {
                                        0 => {}
                                        _ => {
                                            let l47 = *arg0
                                                .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l48 = *arg0
                                                .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l47, l48, 1);
                                        }
                                    }
                                }
                            }
                        }
                        _ => {
                            let l49 = i32::from(*arg0.add(8).cast::<u8>());
                            match l49 {
                                0 => {}
                                1 => {}
                                2 => {
                                    let l50 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l51 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l50, l51, 1);
                                }
                                _ => {
                                    let l52 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l53 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l52, l53, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    type SearchSession: GuestSearchSession;
                    /// Start a search session, returning a search context
                    fn start_search(
                        params: SearchParams,
                    ) -> Result<SearchSession, SearchError>;
                    /// One-shot search that returns results immediately (limited result count)
                    fn search_once(
                        params: SearchParams,
                    ) -> Result<
                        (_rt::Vec<SearchResult>, Option<SearchMetadata>),
                        SearchError,
                    >;
                }
                pub trait GuestSearchSession: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]golem:web-search-google/web-search@1.0.0"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]search-session"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]golem:web-search-google/web-search@1.0.0"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]search-session"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn new(params: SearchParams) -> Self;
                    /// Get the next page of results
                    fn next_page(&self) -> Result<_rt::Vec<SearchResult>, SearchError>;
                    /// Retrieve session metadata (after any query)
                    fn get_metadata(&self) -> Option<SearchMetadata>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_web_search_google_web_search_1_0_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "golem:web-search-google/web-search@1.0.0#start-search")] unsafe
                        extern "C" fn export_start_search(arg0 : * mut u8,) -> * mut u8 {
                        unsafe { $($path_to_types)*:: _export_start_search_cabi::<$ty >
                        (arg0) } } #[unsafe (export_name =
                        "cabi_post_golem:web-search-google/web-search@1.0.0#start-search")]
                        unsafe extern "C" fn _post_return_start_search(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*:: __post_return_start_search::<$ty
                        > (arg0) } } #[unsafe (export_name =
                        "golem:web-search-google/web-search@1.0.0#[constructor]search-session")]
                        unsafe extern "C" fn export_constructor_search_session(arg0 : *
                        mut u8,) -> i32 { unsafe { $($path_to_types)*::
                        _export_constructor_search_session_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::SearchSession > (arg0) } } #[unsafe
                        (export_name =
                        "golem:web-search-google/web-search@1.0.0#[method]search-session.next-page")]
                        unsafe extern "C" fn export_method_search_session_next_page(arg0
                        : * mut u8,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_search_session_next_page_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::SearchSession > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_golem:web-search-google/web-search@1.0.0#[method]search-session.next-page")]
                        unsafe extern "C" fn
                        _post_return_method_search_session_next_page(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*::
                        __post_return_method_search_session_next_page::<<$ty as
                        $($path_to_types)*:: Guest >::SearchSession > (arg0) } } #[unsafe
                        (export_name =
                        "golem:web-search-google/web-search@1.0.0#[method]search-session.get-metadata")]
                        unsafe extern "C" fn
                        export_method_search_session_get_metadata(arg0 : * mut u8,) -> *
                        mut u8 { unsafe { $($path_to_types)*::
                        _export_method_search_session_get_metadata_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::SearchSession > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_golem:web-search-google/web-search@1.0.0#[method]search-session.get-metadata")]
                        unsafe extern "C" fn
                        _post_return_method_search_session_get_metadata(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*::
                        __post_return_method_search_session_get_metadata::<<$ty as
                        $($path_to_types)*:: Guest >::SearchSession > (arg0) } } #[unsafe
                        (export_name =
                        "golem:web-search-google/web-search@1.0.0#search-once")] unsafe
                        extern "C" fn export_search_once(arg0 : * mut u8,) -> * mut u8 {
                        unsafe { $($path_to_types)*:: _export_search_once_cabi::<$ty >
                        (arg0) } } #[unsafe (export_name =
                        "cabi_post_golem:web-search-google/web-search@1.0.0#search-once")]
                        unsafe extern "C" fn _post_return_search_once(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_search_once::<$ty >
                        (arg0) } } const _ : () = { #[doc(hidden)] #[unsafe (export_name
                        =
                        "golem:web-search-google/web-search@1.0.0#[dtor]search-session")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: SearchSession::dtor::< <$ty
                        as $($path_to_types)*:: Guest >::SearchSession > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_web_search_google_web_search_1_0_0_cabi;
                #[repr(align(8))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 72 + 14 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 72
                        + 14 * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub use alloc_crate::alloc;
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_web_search_google_library_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::golem::web_search_google::web_search::__export_golem_web_search_google_web_search_1_0_0_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::golem::web_search_google::web_search);
    };
}
#[doc(inline)]
pub(crate) use __export_web_search_google_library_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:golem:web-search-google@1.0.0:web-search-google-library:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1450] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x9a\x0a\x01A\x02\x01\
A\x08\x01B\x1c\x01ks\x01r\x02\x03urls\x0bdescription\0\x04\0\x0cimage-result\x03\
\0\x01\x01ku\x01p\x02\x01k\x04\x01ps\x01k\x06\x01r\x0a\x05titles\x03urls\x07snip\
pets\x0bdisplay-url\0\x06source\0\x05score\x03\x0chtml-snippet\0\x0edate-publish\
ed\0\x06images\x05\x0econtent-chunks\x07\x04\0\x0dsearch-result\x03\0\x08\x01m\x03\
\x03off\x06medium\x04high\x04\0\x11safe-search-level\x03\0\x0a\x01r\x03\x05limit\
y\x09remainingy\x0freset-timestampw\x04\0\x0frate-limit-info\x03\0\x0c\x01kw\x01\
k\x0b\x01k\x0d\x01r\x08\x05querys\x0dtotal-results\x0e\x0esearch-time-ms\x03\x0b\
safe-search\x0f\x08language\0\x06region\0\x0fnext-page-token\0\x0brate-limits\x10\
\x04\0\x0fsearch-metadata\x03\0\x11\x01m\x04\x03day\x04week\x05month\x04year\x04\
\0\x0atime-range\x03\0\x13\x01ky\x01k\x14\x01k\x7f\x01r\x0b\x05querys\x0bsafe-se\
arch\x0f\x08language\0\x06region\0\x0bmax-results\x15\x0atime-range\x16\x0finclu\
de-domains\x07\x0fexclude-domains\x07\x0einclude-images\x17\x0cinclude-html\x17\x0f\
advanced-answer\x17\x04\0\x0dsearch-params\x03\0\x18\x01q\x04\x0dinvalid-query\0\
\0\x0crate-limited\x01y\0\x13unsupported-feature\x01s\0\x0dbackend-error\x01s\0\x04\
\0\x0csearch-error\x03\0\x1a\x03\0#golem:web-search-google/types@1.0.0\x05\0\x02\
\x03\0\0\x0dsearch-params\x02\x03\0\0\x0dsearch-result\x02\x03\0\0\x0fsearch-met\
adata\x02\x03\0\0\x0csearch-error\x01B\x1b\x02\x03\x02\x01\x01\x04\0\x0dsearch-p\
arams\x03\0\0\x02\x03\x02\x01\x02\x04\0\x0dsearch-result\x03\0\x02\x02\x03\x02\x01\
\x03\x04\0\x0fsearch-metadata\x03\0\x04\x02\x03\x02\x01\x04\x04\0\x0csearch-erro\
r\x03\0\x06\x04\0\x0esearch-session\x03\x01\x01i\x08\x01@\x01\x06params\x01\0\x09\
\x04\0\x1b[constructor]search-session\x01\x0a\x01h\x08\x01p\x03\x01j\x01\x0c\x01\
\x07\x01@\x01\x04self\x0b\0\x0d\x04\0\x20[method]search-session.next-page\x01\x0e\
\x01k\x05\x01@\x01\x04self\x0b\0\x0f\x04\0#[method]search-session.get-metadata\x01\
\x10\x01j\x01\x09\x01\x07\x01@\x01\x06params\x01\0\x11\x04\0\x0cstart-search\x01\
\x12\x01o\x02\x0c\x0f\x01j\x01\x13\x01\x07\x01@\x01\x06params\x01\0\x14\x04\0\x0b\
search-once\x01\x15\x04\0(golem:web-search-google/web-search@1.0.0\x05\x05\x04\0\
7golem:web-search-google/web-search-google-library@1.0.0\x04\0\x0b\x1f\x01\0\x19\
web-search-google-library\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit\
-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
